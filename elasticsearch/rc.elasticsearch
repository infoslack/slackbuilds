#!/bin/sh
#
# /etc/init.d/elasticsearch -- startup script for Elasticsearch
#
# Written by Miquel van Smoorenburg <miquels@cistron.nl>.
# Modified for Debian GNU/Linux	by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for Tomcat by Stefan Gybas <sgybas@debian.org>.
# Modified for Tomcat6 by Thierry Carrez <thierry.carrez@ubuntu.com>.
# Additional improvements by Jason Brittain <jason.brittain@mulesoft.com>.
# Modified by Nicolas Huray for ElasticSearch <nicolas.huray@gmail.com>.
# Modified by Daniel Romero for ElasticSearch - Slackware <infoslack@gmail.com>.
#
### BEGIN INIT INFO
# Provides:          elasticsearch
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts elasticsearch
# Description:       Starts elasticsearch using start-stop-daemon
### END INIT INFO

set -e

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=elasticsearch
DESC="ElasticSearch Server"
DEFAULT=/etc/default/$NAME

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi


#. /lib/lsb/init-functions
#
#if [ -r /etc/default/rcS ]; then
#	. /etc/default/rcS
#fi


# The following variables can be overwritten in $DEFAULT

# Run ElasticSearch as this user ID and group ID
ES_USER=elasticsearch
ES_GROUP=elasticsearch

# The first existing directory is used for JAVA_HOME (if JAVA_HOME is not defined in $DEFAULT)
JDK_DIRS="/usr/lib/java /usr/lib64/java /usr/lib/jvm /usr/lib64/jvm"

# Look for the right JVM to use
for jdir in $JDK_DIRS; do
    if [ -r "$jdir/bin/java" -a -z "${JAVA_HOME}" ]; then
        JAVA_HOME="$jdir"
    fi
done
export JAVA_HOME

# Directory where the ElasticSearch binary distribution resides
ES_HOME=/usr/share

# Heap Size (defaults to 256m min, 1g max)
#ES_HEAP_SIZE=2g

# Heap new generation
#ES_HEAP_NEWSIZE=

# max direct memory
#ES_DIRECT_SIZE=

# Additional Java OPTS
#ES_JAVA_OPTS=

# Maximum number of open files
MAX_OPEN_FILES=65535

# Maximum amount of locked memory
#MAX_LOCKED_MEMORY=

# ElasticSearch log directory
LOG_DIR=/var/log/$NAME

# ElasticSearch data directory
DATA_DIR=/var/lib/$NAME

# ElasticSearch work directory
WORK_DIR=/tmp/$NAME

# ElasticSearch configuration directory
CONF_DIR=/etc/$NAME

# ElasticSearch configuration file (elasticsearch.yml)
CONF_FILE=$CONF_DIR/elasticsearch.yml

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
	. "$DEFAULT"
fi

# Define other required variables
PID_FILE=/var/run/$NAME.pid
DAEMON=$ES_HOME/bin/elasticsearch
DAEMON_OPTS="-p $PID_FILE -Des.default.config=$CONF_FILE -Des.default.path.home=$ES_HOME -Des.default.path.logs=$LOG_DIR -Des.default.path.data=$DATA_DIR -Des.default.path.work=$WORK_DIR -Des.default.path.conf=$CONF_DIR"

export ES_HEAP_SIZE
export ES_HEAP_NEWSIZE
export ES_DIRECT_SIZE
export ES_JAVA_OPTS

# Check DAEMON exists
test -x $DAEMON || exit 0

checkJava() {
	set +e
	if [ -x "$JAVA_HOME/bin/java" ]; then
		JAVA="$JAVA_HOME/bin/java"
	else
		JAVA=$(which java)
	fi

	if [ ! -x "$JAVA" ]; then
		echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
		exit 1
	fi
	set -e
}

case "$1" in
  start)
	checkJava

	if [ -n "$MAX_LOCKED_MEMORY" -a -z "$ES_HEAP_SIZE" ]; then
		echo "MAX_LOCKED_MEMORY is set - ES_HEAP_SIZE must also be set"
		exit 1
	fi

	echo "Starting $DESC"

	set +e
	$DAEMON --status --pidfile "$PID_FILE" >/dev/null
	if [ "$?" != "0" ]; then
		# Prepare environment
		mkdir -p "$LOG_DIR" "$DATA_DIR" "$WORK_DIR" && chown "$ES_USER":"$ES_GROUP" "$LOG_DIR" "$DATA_DIR" "$WORK_DIR"
		touch "$PID_FILE" && chown "$ES_USER":"$ES_GROUP" "$PID_FILE"

		if [ -n "$MAX_OPEN_FILES" ]; then
			ulimit -n $MAX_OPEN_FILES
		fi

		if [ -n "$MAX_LOCKED_MEMORY" ]; then
			ulimit -l $MAX_LOCKED_MEMORY
		fi

		# Start Daemon
		$DAEMON --start -b --user "$ES_USER" -c "$ES_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS

		sleep 1
		$DAEMON --status --pidfile "$PID_FILE" >/dev/null
		if [ "$?" != "0" ]; then
			if [ -f "$PID_FILE" ]; then
				rm -f "$PID_FILE"
			fi
			echo $1
		else
			echo $0
		fi
	else
	    echo "(already running)"
	    echo $0
	fi
	;;
  stop)
	echo "Stopping $DESC"

	set +e
	if [ -f "$PID_FILE" ]; then
		$DAEMON --stop --pidfile "$PID_FILE" \
			--user "$ES_USER" \
			--retry=TERM/20/KILL/5 >/dev/null
		if [ $? -eq 1 ]; then
			echo "$DESC is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat $PID_FILE`"
			echo "Failed to stop $DESC (pid $PID)"
			exit 1
		fi
		rm -f "$PID_FILE"
	else
		echo "(not running)"
	fi
	echo 0
	set -e
	;;
  status)
	set +e
	$DAEMON --status --pidfile "$PID_FILE" >/dev/null 2>&1
	if [ "$?" != "0" ]; then
		if [ -f "$PID_FILE" ]; then
		    echo "$DESC is not running, but pid file exists."
			exit 1
		else
		    echo "$DESC is not running."
			exit 3
		fi
	else
		echo "$DESC is running with pid `cat $PID_FILE`"
	fi
	set -e
    ;;
  restart|force-reload)
	if [ -f "$PID_FILE" ]; then
		$0 stop
		sleep 1
	fi
	$0 start
	;;
  *)
	echo "Usage: $0 {start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
